{
    "scope": "source.js",

    "completions":
    [
    	// jQuery Lite
	    { "trigger": ".addClass", "contents": ".addClass(${1:className})" },
	    { "trigger": ".after", "contents": ".after(${1:el})" },
	    { "trigger": ".append", "contents": ".append(${1:el})" },
	    { "trigger": ".attr", "contents": ".attr(${1:el})" },
	    { "trigger": ".bind", "contents": ".bind(${1:eventType}${2:, eventData}${3:, eventHandler})" },
	    { "trigger": ".children", "contents": ".children()" },
	    { "trigger": ".clone", "contents": ".clone(${1:withDataAndEvents})" },
	    { "trigger": ".contents", "contents": ".contents(${1:withDataAndEvents})" },
	    { "trigger": ".css", "contents": ".css(${1:propertyName(s)})" },
	    { "trigger": ".data", "contents": ".data(${1:key, value | obj})" },
	    { "trigger": ".eq", "contents": ".eq(${1:index})" },
	    { "trigger": ".find", "contents": ".find(${1:tag})" },
	    { "trigger": ".hasClass", "contents": ".hasClass(${1:className})" },
	    { "trigger": ".html", "contents": ".html()" },
	    { "trigger": ".next", "contents": ".next()" },
	    { "trigger": ".parent", "contents": ".parent()" },
	    { "trigger": ".prepend", "contents": ".prepend(${1:content})" },
	    { "trigger": ".prop", "contents": ".prop(${1:propertyName})" },
	    { "trigger": ".ready", "contents": ".ready(${1:handler})" },
	    { "trigger": ".remove", "contents": ".remove(${1:selector})" },
	    { "trigger": ".removeAttr", "contents": ".removeAttr(${1:attributeName})" },
	    { "trigger": ".removeClass", "contents": ".removeClass(${1:className})" },
	    { "trigger": ".removeData", "contents": ".removeData(${1:name})" },
	    { "trigger": ".replaceWith", "contents": ".replaceWith(${1:newContent})" },
	    { "trigger": ".text", "contents": ".text()" },
	    { "trigger": ".toggleClass", "contents": ".toggleClass(${1:className})" },
	    { "trigger": ".triggerHandler", "contents": ".triggerHandler(${1:eventType})" },
	    { "trigger": ".unbind", "contents": ".unbind(${1:eventType}{2:, handler})" },
	    { "trigger": ".val", "contents": ".val(${1:eventType}{2:, handler})" },
	    { "trigger": ".wrap", "contents": ".wrap(${1:wrappingElement})" },

	    // special jQuery Lite functions
	    { "trigger": ".controller", "contents": ".controller(${1:name})" },
	    { "trigger": ".injector", "contents": ".injector()" },
	    { "trigger": ".scope", "contents": ".scope()" },
	    { "trigger": ".inheritedData", "contents": ".inheritedData()" },

	    // scope functions
	    { "trigger": ".$apply", "contents": ".$apply(${1:exp})" },
	    { "trigger": ".$broadcast", "contents": ".$broadcast(${1:name}${2:, args})" },
	    { "trigger": ".$destroy", "contents": ".$destroy()" },
	    { "trigger": ".$digest", "contents": ".$digest()" },
	    { "trigger": ".$emit", "contents": ".$emit(${1:name}${2:, args})" },
	    { "trigger": ".$eval", "contents": ".$eval(${1:expression})" },
	    { "trigger": ".$evalAsync", "contents": ".$evalAsync(${1:expression})" },
	    { "trigger": ".$new", "contents": ".$new(${1:isolate})" },
	    { "trigger": ".$on", "contents": ".$on(${1:name}, ${2:listener})" },
	    { "trigger": ".$watch", "contents": ".$watch(${1:watchExpression}${2:, listener}${3:, objectEquality})" },
	    { "trigger": ".$watchCollection", "contents": ".$watchCollection(${1:obj}, ${2:listener})" },
	    { "trigger": ".$id", "contents": ".$id" },

	    // logging functions
	    { "trigger": "log.debug", "contents": "log.debug('${1:debug}')" },
	    { "trigger": "log.error", "contents": "log.error('${1:error}')" },
	    { "trigger": "log.info", "contents": "log.info('${1:info}')" },
	    { "trigger": "log.log", "contents": "log.log('${1:log}')" },
	    { "trigger": "log.warn", "contents": "log.warn('${1:warning}')" },
	    { "trigger": "log.assertEmpty", "contents": "log.assertEmpty()" },
	    { "trigger": "log.reset", "contents": "log.reset()" },

	    // global functions
	    { "trigger": "angular.bind", "contents": "angular.bind(${1:self}, ${2:function})" },
	    { "trigger": "angular.bootstrap", "contents": "angular.bootstrap(${1:element}${2:, [${3:modules}]})" },
	    { "trigger": "angular.copy", "contents": "angular.copy(${1:source}${2:, ${3:destination}})" },
	    { "trigger": "angular.element", "contents": "angular.element(${1:element})" },
	    { "trigger": "angular.equals", "contents": "angular.equals(${1:obj1}, ${2:obj2})" },
	    { "trigger": "angular.extend", "contents": "angular.extend(${1:destination}, ${2:source})" },
	    { "trigger": "angular.forEach", "contents": "angular.forEach(${1:obj}, ${2:iterator}$3)" },
	    { "trigger": "angular.fromJson", "contents": "angular.fromJson(${1:jsonString})" },
	    { "trigger": "angular.identity", "contents": "angular.identity()" },
	    { "trigger": "angular.injector", "contents": "angular.injector([${1:modules}])" },
	    { "trigger": "angular.isArray", "contents": "angular.isArray(${1:value})" },
	    { "trigger": "angular.isDate", "contents": "angular.isDate(${1:value})" },
	    { "trigger": "angular.isDefined", "contents": "angular.isDefined(${1:value})" },
	    { "trigger": "angular.isElement", "contents": "angular.isElement(${1:value})" },
	    { "trigger": "angular.isFunction", "contents": "angular.isFunction(${1:value})" },
	    { "trigger": "angular.isObject", "contents": "angular.isObject(${1:value})" },
	    { "trigger": "angular.isString", "contents": "angular.isString(${1:value})" },
	    { "trigger": "angular.isUndefined", "contents": "angular.isUndefined(${1:value})" },
	    { "trigger": "angular.lowercase", "contents": "angular.lowercase(${1:string})" },
	    { "trigger": "angular.module", "contents": "angular.module('${1:moduleName}', [$2])" },
	    { "trigger": "angular.noop", "contents": "angular.noop" },
	    { "trigger": "angular.toJson", "contents": "angular.toJson(${1:obj}${2:, true})" },
	    { "trigger": "angular.uppercase", "contents": "angular.uppercase(${1:string})" },
	    { "trigger": "angular.version", "contents": "angular.version" },

	    // variables
        "anchorScroll",
        "animation",
        "animator",
        "cacheFactory",
        "compile",
        "controller",
        "exceptionHandler",
        "location",
        "locationProvider",
        "log",
        "parse",
        "resource",
        "rootElement",
        "rootScope",
        "route",
        "routeParams",
        "routeProvider",
        "templateCache",
        "timeout",
        "scope"
    ]
}
